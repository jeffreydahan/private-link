Azure Private Link provides private connectivity from a virtual network to Azure platform as a service (PaaS), customer-owned, or Microsoft partner services. It simplifies the network architecture and secures the connection between endpoints in Azure by eliminating data exposure to the public internet.  In order to deal with different networking issues to make a solution like this possible, Azure leverages proxy protocol v2, leveraging the protocol to create a custom Azure specific PPv2 header.  This is a very powerful solution that allows SaaS providers to offer a more secure communication method for their customers, as the data never leaves the internal private Azure network. 

 

NGINX Plus provides a flexible PPv2 aware intelligent layer 7 load balancer, that is able to decode the Azure specific PPv2 header.  This empowers our customers to be able to make more intelligent routing decisions that take this information into account.  It also allows customers to convert the PPv2 headers into standard HTTP headers to send to their applications, so they can take advantage of this extra information, without having to build PPv2 functionality into the application itself.   

 

Due to the way that the Azure PPv2 header is encoded, it does require a small customization using javascript, leveraging the NGINX Javascript module.  As you can see in the example configuration below, this is a very simple and flexible process. 

 

azure-private-endpoint.conf: 

load_module modules/ngx_http_js_module.so;
js_include /etc/nginx/azure-privatelink.js; 
js_set $custom_tlv_value convertTLVstring; 

server { 
    listen       80 proxy_protocol default_server; 
    server_name  localhost; 

    location / { 
        root   /usr/share/nginx/html; 
        index  index.html index.htm; 
    add_header AZURE-LINK-ID $custom_tlv_value; 
    } 

        root   /usr/share/nginx/html; 
    } 
} 

 

azure-privatelink.js: 

function convertTLVstring(r) { 
    var tlv_value = r.variables.proxy_protocol_tlv_0xEE 
    tlv_value = tlv_value.slice(1) 
    var value = 0; 
    for (var i = tlv_value.length - 1; i >=0; i--) { value *= 256; value += tlv_value.charCodeAt(i); } 
    return value; 
}

 

This simple configuration example is decoding the Azure PPv2 header, then adding it as the HTTP response header ‘AZURE-LINK-ID', but once the variable ‘$custom_tlv_value’ is set in the NGINX runtime, it can be leveraged just like any other variable.  Below is another example of using this variable to make routing decisions: 

 

js_include /etc/nginx/azure-privatelink.js; 

js_set $custom_tlv_value convertTLVstring; 

  

server { 

    listen       80 proxy_protocol default_server; 

    server_name  localhost; 

  

    map $custom_tlv_value $customer_upstream { 

        default     default_upstream; 

  

        "822084002"    customer_a_upstream; 

        "823746984"    customer_b_upstream; 

    } 

  

    upstream default_upstream { 

        server 10.10.1.5:80; 

    } 

  

    upstream customer_a_upstream { 

        server 10.10.1.10:80; 

    } 

  

    upstream customer_b_upstream { 

        server 10.10.1.50:80; 

    }         

  

    location / { 

        proxy_pass http://$customer_upstream; 

        proxy_set_header AZURE-LINK-ID $custom_tlv_value; 

    } 

  

} 

 

This example routes requests to different upstreams based on the link id passed by the Azure PPv2 header, as well as adding the link id as a standard HTTP header being sent to the upstream host.  This does assume that you know the link id for each different customer and have dedicated application servers for each. 

 

These are just 2 simple examples of what is possible with NGINX Plus and Azure Private Link. 